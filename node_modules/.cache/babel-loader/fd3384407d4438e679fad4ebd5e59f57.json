{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julius Karl\\\\Documents\\\\GGJ\\\\game\\\\src\\\\field\\\\Field.js\";\nimport React, { Component } from 'react';\nimport './Field.css';\nimport { player_state, setCardPlayedDisplayCallback } from '../gameState/gameState';\n\nclass Field extends Component {\n  constructor(props) {\n    super(props);\n\n    this.randomizeTowers = () => {// get number of players\n      // get value of towers\n      // set player[random] = \"random tower value\"\n    };\n\n    this.setAllLowest = () => {// get lowest value (loop maybe)\n      // iterate through players and set their tower health to the lowest value\n    };\n\n    this.tradeTower = () => {// get player ID\n      // get target ID\n      // set their tower value to each others respectively\n    };\n\n    this.undoLast = () => {// idk reverse a state tracking chain?\n    };\n\n    this.oneOrSeven = () => {// again idk maybe state tracking chain?\n    };\n\n    this.resetTo15 = () => {// iterate through all players\n      // set their tower health to 15\n    };\n\n    this.onePlusRoundCount = () => {//idk\n    };\n\n    this.peekDeck = () => {// pop? unshift?\n    };\n\n    this.modifyTower = (sign, amount) => {//get target player.tower.health\n      // player.tower.health - sign - amount\n    };\n\n    this.state = {\n      highest_tower: null,\n      play_state: true,\n      victory_state: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"fixed-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"playing-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, Object.values(player_state).map(function (player, index) {\n      // Setting State (if we are using states and not DOM)\n      let tower_state = 'tower' + index; // Displaying Tower\n\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"tower-img\",\n        id: player,\n        src: require('../assets/' + player.tower.health + '.png'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    })));\n  }\n\n}\n\nexport default Field;","map":{"version":3,"sources":["C:/Users/Julius Karl/Documents/GGJ/game/src/field/Field.js"],"names":["React","Component","player_state","setCardPlayedDisplayCallback","Field","constructor","props","randomizeTowers","setAllLowest","tradeTower","undoLast","oneOrSeven","resetTo15","onePlusRoundCount","peekDeck","modifyTower","sign","amount","state","highest_tower","play_state","victory_state","render","Object","values","map","player","index","tower_state","require","tower","health"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,SAASC,YAAT,EAAuBC,4BAAvB,QAA2D,wBAA3D;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAE1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,eATmB,GASD,MAAM,CACpB;AACA;AACA;AACH,KAbkB;;AAAA,SAenBC,YAfmB,GAeJ,MAAM,CACjB;AACA;AACH,KAlBkB;;AAAA,SAoBnBC,UApBmB,GAoBN,MAAO,CAChB;AACA;AACA;AACH,KAxBkB;;AAAA,SA0BnBC,QA1BmB,GA0BR,MAAM,CACb;AACH,KA5BkB;;AAAA,SA8BnBC,UA9BmB,GA8BN,MAAM,CACf;AACH,KAhCkB;;AAAA,SAkCnBC,SAlCmB,GAkCP,MAAM,CACd;AACA;AACH,KArCkB;;AAAA,SAuCnBC,iBAvCmB,GAuCC,MAAM,CACtB;AACH,KAzCkB;;AAAA,SA2CnBC,QA3CmB,GA2CR,MAAM,CACb;AACH,KA7CkB;;AAAA,SA+CnBC,WA/CmB,GA+CL,CAACC,IAAD,EAAOC,MAAP,KAAkB,CAC5B;AACA;AACH,KAlDkB;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE,IADN;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,aAAa,EAAE;AAHN,KAAb;AAKH;;AA6CDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,MAAM,CAACC,MAAP,CAActB,YAAd,EAA4BuB,GAA5B,CAAgC,UAASC,MAAT,EAAiBC,KAAjB,EAAuB;AAEpD;AACA,UAAIC,WAAW,GAAG,UAAUD,KAA5B,CAHoD,CAKpD;;AACA,aAAO;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiB;AACpB,QAAA,SAAS,EAAC,WADU;AAEpB,QAAA,EAAE,EAAED,MAFgB;AAGpB,QAAA,GAAG,EAAEG,OAAO,CAAC,eAAeH,MAAM,CAACI,KAAP,CAAaC,MAA5B,GAAqC,MAAtC,CAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,CAAP;AAKH,KAXA,CADL,CADJ,CADJ;AAkBH;;AAzEyB;;AA4E9B,eAAe3B,KAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './Field.css'\r\nimport { player_state, setCardPlayedDisplayCallback } from '../gameState/gameState';\r\n\r\nclass Field extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            highest_tower: null,\r\n            play_state: true,\r\n            victory_state: false\r\n        }\r\n    }\r\n\r\n    randomizeTowers = () => {\r\n        // get number of players\r\n        // get value of towers\r\n        // set player[random] = \"random tower value\"\r\n    }\r\n\r\n    setAllLowest = () => {\r\n        // get lowest value (loop maybe)\r\n        // iterate through players and set their tower health to the lowest value\r\n    }\r\n\r\n    tradeTower = ()  => {\r\n        // get player ID\r\n        // get target ID\r\n        // set their tower value to each others respectively\r\n    }\r\n\r\n    undoLast = () => {\r\n        // idk reverse a state tracking chain?\r\n    }\r\n\r\n    oneOrSeven = () => {\r\n        // again idk maybe state tracking chain?\r\n    }\r\n\r\n    resetTo15 = () => {\r\n        // iterate through all players\r\n        // set their tower health to 15\r\n    }\r\n\r\n    onePlusRoundCount = () => {\r\n        //idk\r\n    }\r\n\r\n    peekDeck = () => {\r\n        // pop? unshift?\r\n    }\r\n\r\n    modifyTower = (sign, amount) => {\r\n        //get target player.tower.health\r\n        // player.tower.health - sign - amount\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fixed-field\">\r\n                <ul className=\"playing-field\">\r\n                    {Object.values(player_state).map(function(player, index){\r\n\r\n                        // Setting State (if we are using states and not DOM)\r\n                        let tower_state = 'tower' + index;\r\n\r\n                        // Displaying Tower\r\n                        return <div key={index}><img \r\n                            className=\"tower-img\" \r\n                            id={player} \r\n                            src={require('../assets/' + player.tower.health + '.png')}/>\r\n                        </div>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Field;"]},"metadata":{},"sourceType":"module"}