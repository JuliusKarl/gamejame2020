(this.webpackJsonpgame=this.webpackJsonpgame||[]).push([[0],[,,,,,,,,function(e,t,n){e.exports=n(24)},,,,,function(e,t,n){},function(e,t,n){e.exports=n.p+"static/media/logo.5d5d9eef.svg"},function(e,t,n){},function(e,t,n){},function(e,t,n){e.exports=n.p+"static/media/6.cd7be7f2.png"},function(e,t,n){e.exports=n.p+"static/media/9.533cfcaa.png"},function(e,t,n){e.exports=n.p+"static/media/4.164047bd.png"},function(e,t,n){e.exports=n.p+"static/media/20.b357e8ab.png"},function(e,t,n){n(22)(n(23))},,function(e,t){e.exports='/* eslint-disable */ /**\n * AirConsole.\n * @copyright 2016 by N-Dream AG, Switzerland. All rights reserved.\n * @version 1.7.0\n *\n * IMPORTANT:\n * @see http://developers.airconsole.com/ for API documentation\n *\n * This file is grouped into the following chapters:\n * - Constants: Constants you should use\n * - Connectivity: Device Ids, connects and disconnects\n * - Messaging: Sending messages between devices\n * - Device States: Setting data for a device that is readable for all devices\n * - Profile data: User profile data, including nicknames and profile pictures\n * - Active players: Setting a couple of devices as active players for a game\n * - Controller Inputs: Special device inputs like device motion\n * - Ads: Showing ads and handling their events\n * - Premium: Handling premium users\n * - Navigation: Changing games and opening external links\n * - User Interface: Changing orientation and look and feel\n * - Persistent Data: Storing data across sessions\n * - High Scores: Storing and retrieving high scores\n *\n * If your prefer an event driven api with .on() .off() and .dispatch()\n * interface instead of sending messages,\n * @see http://github.com/AirConsole/airconsole-events/\n *\n */ /**\n * Your gateway object to AirConsole.\n * There are getter and setter functions for all properties.\n * Do not access properties of this object directly.\n * @constructor\n * @param {AirConsole~Config} opts - Constructor config, see bellow.\n */function AirConsole(opts){this.init_(opts);}/**\n * The configuration for the AirConsole constructor.\n * @typedef {object} AirConsole~Config\n * @property {string} orientation - AirConsole.ORIENTATION_PORTRAIT or\n *           AirConsole.ORIENTATION_LANDSCAPE.\n * @property {boolean|undefined} synchronize_time - If set to true, you can\n *           call getServerTime() to get the time on the game server.\n *           Default is false.\n * @property {boolean|undefiend} setup_document - Sets up the document so\n *           nothing is selectable, zoom is fixed to 1 and scrolling is\n *           disabled (iOS 8 clients drop out of fullscreen when scrolling).\n *           Default: true\n * @property {number|undefined} device_motion - If set, onDeviceMotion gets\n *           called every "device_motion" milliseconds with data from the\n *           accelerometer and the gyroscope. Only for controllers.\n */ /** ------------------------------------------------------------------------ *\n * @chapter                         CONSTANTS                                *\n * ------------------------------------------------------------------------- */ /**\n * The device ID of the game screen.\n * @constant {number}\n */AirConsole.SCREEN=0;/**\n * The portrait orientation.\n * @constant {string}\n */AirConsole.ORIENTATION_PORTRAIT="portrait";/**\n * The landscape orientation.\n * @constant {string}\n */AirConsole.ORIENTATION_LANDSCAPE="landscape";/** ------------------------------------------------------------------------ *\n * @chapter                     CONNECTIVITY                                 *\n * @see         http://developers.airconsole.com/#!/guides/pong              *\n * ------------------------------------------------------------------------- */ /**\n * Gets called when the game console is ready.\n * This event also fires onConnect for all devices that already are\n * connected and have loaded your game.\n * This event also fires onCustomDeviceStateChange for all devices that are\n * connected, have loaded your game and have set a custom Device State.\n * @abstract\n * @param {string} code - The AirConsole join code.\n */AirConsole.prototype.onReady=function(code){};/**\n * Gets called when a device has connected and loaded the game.\n * @abstract\n * @param {number} device_id - the device ID that loaded the game.\n */AirConsole.prototype.onConnect=function(device_id){};/**\n * Gets called when a device has left the game.\n * @abstract\n * @param {number} device_id - the device ID that left the game.\n */AirConsole.prototype.onDisconnect=function(device_id){};/**\n * Returns the device_id of this device.\n * Every device in an AirConsole session has a device_id.\n * The screen always has device_id 0. You can use the AirConsole.SCREEN\n * constant instead of 0.\n * All controllers also get a device_id. You can NOT assume that the device_ids\n * of controllers are consecutive or that they start at 1.\n *\n * DO NOT HARDCODE CONTROLLER DEVICE IDS!\n *\n * If you want to have a logic with "players numbers" (Player 0, Player 1,\n * Player 2, Player 3) use the setActivePlayers helper function! You can\n * hardcode player numbers, but not device_ids.\n *\n * Within an AirConsole session, devices keep the same device_id when they\n * disconnect and reconnect. Different controllers will never get the same\n * device_id in a session. Every device_id remains reserved for the device that\n * originally got it.\n *\n * @see http:// developers.airconsole.com/#/guides/device_ids_and_states\n *\n * @return {number}\n */AirConsole.prototype.getDeviceId=function(){return this.device_id;};/**\n * Returns the device ID of the master controller.\n * Premium devices are prioritzed.\n * @return {number|undefined}\n */AirConsole.prototype.getMasterControllerDeviceId=function(){var premium_device_ids=this.getPremiumDeviceIds();if(premium_device_ids.length){return premium_device_ids[0];}return this.getControllerDeviceIds()[0];};/**\n * Returns all controller device ids that have loaded your game.\n * @return {Array}\n */AirConsole.prototype.getControllerDeviceIds=function(){var result=[];var game_url=this.getGameUrl_(this.getLocationUrl_());for(var i=AirConsole.SCREEN+1;i<this.devices.length;++i){if(this.devices[i]&&this.getGameUrl_(this.devices[i].location)==game_url){result.push(i);}}return result;};/**\n * Returns the current time of the game server.\n * This allows you to have a synchronized clock: You can send the server\n * time in a message to know exactly at what point something happened on a\n * device. This function can only be called if the AirConsole was instantiated\n * with the "synchronize_time" opts set to true and after onReady was called.\n * @return {number} Timestamp in milliseconds.\n */AirConsole.prototype.getServerTime=function(){if(this.server_time_offset===false){throw"AirConsole constructor was not called with "+"{synchronize_time: true}";}return new Date().getTime()+this.server_time_offset;};/** ------------------------------------------------------------------------ *\n * @chapter                     MESSAGING                                    *\n * @see         http://developers.airconsole.com/#!/guides/pong              *\n * ------------------------------------------------------------------------- */ /**\n * Sends a message to another device.\n * @param device_id {number|undefined} - The device ID to send the message to.\n *                                       If "device_id" is undefined, the\n *                                       message is sent to all devices (except\n *                                       this one).\n * @param data\n */AirConsole.prototype.message=function(device_id,data){if(this.device_id!==undefined){AirConsole.postMessage_({action:"message",to:device_id,data:data});}};/**\n * Sends a message to all connected devices.\n * @param data\n */AirConsole.prototype.broadcast=function(data){this.message(undefined,data);};/**\n * Gets called when a message is received from another device\n * that called message() or broadcast().\n * If you dont want to parse messages yourself and prefer an event driven\n * approach, @see http://github.com/AirConsole/airconsole-events/\n * @abstract\n * @param {number} device_id - The device ID that sent the message.\n * @param {serializable} data - The data that was sent.\n */AirConsole.prototype.onMessage=function(device_id,data){};/** ------------------------------------------------------------------------ *\n * @chapter                    DEVICE STATES                                 *\n * @see   http://developers.airconsole.com/#!/guides/device_ids_and_states   *\n * ------------------------------------------------------------------------- */ /**\n * Gets the custom DeviceState of a device.\n * @param {number|undefined} device_id - The device ID of which you want the\n *                                       custom state. Default is this device.\n * @return {Object|undefined} The custom data previously set by the device.\n */AirConsole.prototype.getCustomDeviceState=function(device_id){if(device_id===undefined){device_id=this.device_id;}var device_data=this.devices[device_id];if(device_data&&this.getGameUrl_(this.getLocationUrl_())==this.getGameUrl_(device_data.location)){return device_data["custom"];}};/**\n * Sets the custom DeviceState of this device.\n * @param {Object} data - The custom data to set.\n */AirConsole.prototype.setCustomDeviceState=function(data){if(this.device_id!==undefined){this.devices[this.device_id]["custom"]=data;this.set_("custom",data);}};/**\n * Sets a property in the custom DeviceState of this device.\n * @param {String} key - The property name.\n * @param {mixed} value - The property value.\n */AirConsole.prototype.setCustomDeviceStateProperty=function(key,value){if(this.device_id!==undefined){var state=this.getCustomDeviceState();if(state===undefined){state={};}else if(typeof state!=="object"){throw"Custom DeviceState needs to be of type object";}state[key]=value;this.setCustomDeviceState(state);}};/**\n * Gets called when a device updates it\'s custom DeviceState\n * by calling setCustomDeviceState or setCustomDeviceStateProperty.\n * Make sure you understand the power of device states:\n * @see http://developers.airconsole.com/#/guides/device_ids_and_states\n * @abstract\n * @param {number} device_id - the device ID that changed its custom\n *                             DeviceState.\n * @param {Object} custom_data - The custom DeviceState data value\n */AirConsole.prototype.onCustomDeviceStateChange=function(device_id,custom_data){};/**\n * Gets called when a device joins/leaves a game session or updates its\n * DeviceState (custom DeviceState, profile pic, nickname, internal state).\n * This is function is also called every time onConnect, onDisconnect or\n * onCustomDeviceStateChange, onDeviceProfileChange is called.\n * It\'s like their root function.\n * @abstract\n * @param {number} device_id - the device_id that changed its DeviceState.\n * @param user_data {AirConsole~DeviceState} - the data of that device.\n *        If undefined, the device has left.\n */AirConsole.prototype.onDeviceStateChange=function(device_id,device_data){};/** ------------------------------------------------------------------------ *\n * @chapter                       PROFILE                                    *\n * ------------------------------------------------------------------------- */ /**\n * Returns the globally unique id of a device.\n * @param {number|undefined} device_id - The device id for which you want the\n *                                       uid. Default is this device.\n * @return {string|undefined}\n */AirConsole.prototype.getUID=function(device_id){if(device_id===undefined){device_id=this.device_id;}var device_data=this.devices[device_id];if(device_data){return device_data.uid;}};/**\n * Returns the nickname of a user.\n * @param {number|undefined} device_id - The device id for which you want the\n *                                       nickname. Default is this device.\n *                                       Screens don\'t have nicknames.\n * @return {string|undefined}\n */AirConsole.prototype.getNickname=function(device_id){if(device_id===undefined){device_id=this.device_id;}var device_data=this.devices[device_id];if(device_data){return device_data.nickname||"Guest "+device_id;}};/**\n * Returns the url to a profile picture of the user.\n * @param {number|string|undefined} device_id_or_uid - The device id or uid for\n *                                                     which you want the\n *                                                     profile picture.\n *                                                     Default is the current\n *                                                     user.\n *                                                     Screens don\'t have\n *                                                     profile pictures.\n * @param {number|undefined} size - The size of in pixels of the picture.\n *                                  Default is 64.\n * @return {string|undefined}\n */AirConsole.prototype.getProfilePicture=function(device_id_or_uid,size){if(device_id_or_uid===undefined){device_id_or_uid=this.device_id;}else if(typeof device_id_or_uid=="string"){return"https://www.airconsole.com/api/profile-picture?uid="+device_id_or_uid+"&size="+(size||64);}var device_data=this.devices[device_id_or_uid];if(device_data){var url="https://www.airconsole.com/api/profile-picture?uid="+device_data.uid+"&size="+(size||64);if(device_data.picture){url+="&v="+device_data.picture;}return url;}};/**\n * Gets called when a device updates it\'s profile pic, nickname or email.\n * @abstract\n * @param {number} device_id - The device_id that changed its profile.\n */AirConsole.prototype.onDeviceProfileChange=function(device_id){};/**\n * Returns true if a user is logged in.\n * @param {number|undefined} device_id - The device_id of the user.\n *                                       Default is this device.\n * @returns {boolean}\n */AirConsole.prototype.isUserLoggedIn=function(device_id){if(device_id==undefined){device_id=this.device_id;}var data=this.devices[device_id];if(data){return data.auth;}};/**\n * Requests the email address of this device and calls onEmailAddress iff the\n * request was granted. For privacy reasons, you need to whitelist your\n * game in order to receive the email address of the user. To whitelist your\n * game, contact developers@airconsole.com. For development purposes, localhost\n * is always allowed.\n */AirConsole.prototype.requestEmailAddress=function(){this.set_("email",true);};/**\n * Gets called if the request of requestEmailAddress() was granted.\n * For privacy reasons, you need to whitelist your game in order to receive\n * the email address of the user. To whitelist your game, contact\n * developers@airconsole.com. For development purposes, localhost is always\n * allowed.\n * @abstract\n * @param {string|undefined} email_address - The email address of the user if\n *        it was set.\n */AirConsole.prototype.onEmailAddress=function(email_address){};/**\n * Lets the user change his nickname, profile picture and email address.\n * If you need a real nickname of the user, use this function.\n * onDeviceProfileChange will be called if the user logs in.\n */AirConsole.prototype.editProfile=function(){this.set_("login",true);};/** ------------------------------------------------------------------------ *\n * @chapter                   ACTIVE PLAYERS                                 *\n * @see   http://developers.airconsole.com/#!/guides/device_ids_and_states   *\n * ------------------------------------------------------------------------- */ /**\n * Takes all currently connected controllers and assigns them a player number.\n * Can only be called by the screen. You don\'t have to use this helper\n * function, but this mechanism is very convenient if you want to know which\n * device is the first player, the second player, the third player ...\n * The assigned player numbers always start with 0 and are consecutive.\n * You can hardcode player numbers, but not device_ids.\n * Once the screen has called setActivePlayers you can get the device_id of\n * the first player by calling convertPlayerNumberToDeviceId(0), the device_id\n * of the second player by calling convertPlayerNumberToDeviceId(1), ...\n * You can also convert device_ids to player numbers by calling\n * convertDeviceIdToPlayerNumber(device_id). You can get all device_ids that\n * are active players by calling getActivePlayerDeviceIds().\n * The screen can call this function every time a game round starts.\n * @param {number} max_players - The maximum number of controllers that should\n *                               get a player number assigned.\n */AirConsole.prototype.setActivePlayers=function(max_players){if(this.getDeviceId()!=AirConsole.SCREEN){throw"Only the AirConsole.SCREEN can set the active players!";}this.device_id_to_player_cache=undefined;var players=this.getControllerDeviceIds();if(max_players!==undefined){players=players.slice(0,Math.min(players.length,max_players));}this.devices[AirConsole.SCREEN]["players"]=players;this.set_("players",players);};/**\n * Gets called when the screen sets the active players by calling\n * setActivePlayers().\n * @abstract\n * @param {number|undefined} player_number - The player number of this device.\n *                                           Can be undefined if this device\n *                                           is not part of the active players.\n */AirConsole.prototype.onActivePlayersChange=function(player_number){};/**\n * Returns an array of device_ids of the active players previously set by the\n * screen by calling setActivePlayers. The first device_id in the array is the\n * first player, the second device_id in the array is the second player, ...\n * @returns {Array}\n */AirConsole.prototype.getActivePlayerDeviceIds=function(){return this.devices[AirConsole.SCREEN]["players"]||[];};/**\n * Returns the device_id of a player, if the player is part of the active\n * players previously set by the screen by calling setActivePlayers. If fewer\n * players are in the game than the passed in player_number or the active\n * players have not been set by the screen, this function returns undefined.\n * @param player_number\n * @returns {number|undefined}\n */AirConsole.prototype.convertPlayerNumberToDeviceId=function(player_number){return this.getActivePlayerDeviceIds()[player_number];};/**\n * Returns the player number for a device_id, if the device_id is part of the\n * active players previously set by the screen by calling setActivePlayers.\n * Player numbers are zero based and are consecutive. If the device_id is not\n * part of the active players, this function returns undefined.\n * @param device_id\n * @returns {number|undefined}\n */AirConsole.prototype.convertDeviceIdToPlayerNumber=function(device_id){if(!this.devices[AirConsole.SCREEN]||!this.devices[AirConsole.SCREEN]["players"]){return;}if(!this.device_id_to_player_cache){this.device_id_to_player_cache={};var players=this.devices[AirConsole.SCREEN]["players"];for(var i=0;i<players.length;++i){this.device_id_to_player_cache[players[i]]=i;}}return this.device_id_to_player_cache[device_id];};/** ------------------------------------------------------------------------ *\n * @chapter                 CONTROLLER INPUTS                                *\n * ------------------------------------------------------------------------- */ /**\n * Gets called every X milliseconds with device motion data iff the\n * AirConsole was instantiated with the "device_motion" opts set to the\n * interval in milliseconds. Only works for controllers.\n * Note: Some browsers do not allow games to access accelerometer and gyroscope\n *       in an iframe (your game). So use this method if you need gyroscope\n *       or accelerometer data.\n * @abstract\n * @param {object} data - data.x, data.y, data.z for accelerometer\n *                        data.alpha, data.beta, data.gamma for gyroscope\n */AirConsole.prototype.onDeviceMotion=function(data){};/**\n * Vibrates the device for a specific amount of time. Only works for controllers.\n * Note: iOS ignores the specified time and vibrates for a pre-set amount of time.\n * @param {Number} time - Milliseconds to vibrate the device\n */AirConsole.prototype.vibrate=function(time){this.set_("vibrate",time);};/** ------------------------------------------------------------------------ *\n * @chapter                          ADS                                     *\n * ------------------------------------------------------------------------- */ /**\n * Requests that AirConsole shows a multiscreen advertisment.\n * Can only be called by the AirConsole.SCREEN.\n * onAdShow is called on all connected devices if an advertisement\n * is shown (in this event please mute all sounds).\n * onAdComplete is called on all connected devices when the\n * advertisement is complete or no advertisement was shown.\n */AirConsole.prototype.showAd=function(){if(this.device_id!=AirConsole.SCREEN){throw"Only the AirConsole.SCREEN can call showAd!";}this.set_("ad",true);};/**\n * Gets called if a fullscreen advertisement is shown on this screen.\n * In case this event gets called, please mute all sounds.\n * @abstract\n */AirConsole.prototype.onAdShow=function(){};/**\n * Gets called when an advertisement is finished or no advertisement was shown.\n * @abstract\n * @param {boolean} ad_was_shown - True iff an ad was shown and onAdShow was\n *                                 called.\n */AirConsole.prototype.onAdComplete=function(ad_was_shown){};/** ------------------------------------------------------------------------ *\n * @chapter                       PREMIUM                                    *\n * ------------------------------------------------------------------------- */ /**\n * Returns true if the device is premium\n * @param {number} device_id - The device_id that should be checked.\n *                             Only controllers can be premium.\n *                             Default is this device.\n * @return {boolean|undefined} Returns true or false for a valid device_id and\n *                             undefined if the device_id is not valid.\n *\n */AirConsole.prototype.isPremium=function(device_id){if(device_id===undefined){device_id=this.device_id;}var device_data=this.devices[device_id];if(device_data&&device_id!=AirConsole.SCREEN){return!!device_data.premium;}};/**\n * Returns all device ids that are premium.\n * @return {Array<number>}\n */AirConsole.prototype.getPremiumDeviceIds=function(){var premium=[];for(var i=1;i<this.devices.length;++i){if(this.isPremium(i)){premium.push(i);}}return premium;};/**\n * Offers the user to become a premium member.\n * Can only be called from controllers.\n * If you call getPremium in development mode, the device becomes premium\n * immediately.\n */AirConsole.prototype.getPremium=function(){this.set_("premium",true);};/**\n * Gets called when a device becomes premium or when a premium device connects.\n * @abstract\n * @param {number} device_id - The device id of the premium device.\n */AirConsole.prototype.onPremium=function(device_id){};/** ------------------------------------------------------------------------ *\n * @chapter                       NAVIGATION                                 *\n * ------------------------------------------------------------------------- */ /**\n * Request that all devices return to the AirConsole store.\n */AirConsole.prototype.navigateHome=function(){this.set_("home",true);};/**\n * Request that all devices load a game by url or game id.\n * @param {string} url - The base url of the game to navigate to\n *                       (excluding screen.html or controller.html).\n *                       Instead of a url you may also pass a game id.\n *                       You can also navigate relatively to your current\n *                       game directory: To navigate to a subdirectory,\n *                       pass "./DIRECTORY_NAME". To navigate to a parent\n *                       directory pass "..".\n * @param {object} parameters - You can pass parameters to the game that gets\n *                              loaded. Any jsonizable object is fine.\n *                              The parameters will be appended to the url\n *                              using a url hash.\n */AirConsole.prototype.navigateTo=function(url,parameters){if(url.indexOf(".")==0){var current_location=this.getLocationUrl_();var full_path=current_location.split("#")[0].split("/");full_path.pop();var relative=url.split("/");for(var i=0;i<relative.length;++i){if(relative[i]==".."){full_path.pop();}else if(relative[i]!="."&&relative[i]!=""){full_path.push(relative[i]);}}url=full_path.join("/")+"/";}if(parameters){url+="#"+encodeURIComponent(JSON.stringify(parameters));}this.set_("home",url);};/**\n * Get the parameters in the loaded game that were passed to navigateTo.\n * @returns {*}\n */AirConsole.prototype.getNavigateParameters=function(){if(this.navigate_parameters_cache_){return this.navigate_parameters_cache_;}if(document.location.hash.length>1){var result=JSON.parse(decodeURIComponent(document.location.hash.substr(1)));this.navigate_parameters_cache_=result;return result;}};/**\n * Opens url in external (default-system) browser. Call this method instead of\n * calling window.open. In-App it will open the system\'s default browser.\n * Because of Safari iOS you can only use it with the onclick handler:\n * <div onclick="airconsole.openExternalUrl(\'my-url.com\');">Open browser</div>\n * OR in JS with assigning element.onclick.\n * @param {string} url - The url to open\n */AirConsole.prototype.openExternalUrl=function(url){var data=this.devices[this.device_id];if(data.client&&data.client.pass_external_url===true){this.set_("pass_external_url",url);}else{window.open(url);}};/** ------------------------------------------------------------------------ *\n * @chapter                     USER INTERFACE                               *\n * ------------------------------------------------------------------------- */ /**\n * Shows or hides the default UI. Only has an effect on the screen.\n * @param {boolean} visible - Whether to show or hide the default UI.\n */AirConsole.prototype.showDefaultUI=function(visible){this.set_("default_ui",visible);};/**\n * Sets the device orientation.\n * @param {string} orientation - AirConsole.ORIENTATION_PORTRAIT or\n *                               AirConsole.ORIENTATION_LANDSCAPE.\n */AirConsole.prototype.setOrientation=function(orientation){this.set_("orientation",orientation);};/** ------------------------------------------------------------------------ *\n * @chapter                     PERSISTENT DATA                              *\n * ------------------------------------------------------------------------- */ /**\n * Requests persistent data from the servers.\n * @param {Array<String>|undefined} uids - The uids for which you would like\n *                                         to request the persistent data.\n *                                         Default is the uid of this device.\n */AirConsole.prototype.requestPersistentData=function(uids){if(!uids){uids=[this.getUID()];}this.set_("persistentrequest",{"uids":uids});};/**\n * Gets called when persistent data was loaded from requestPersistentData().\n * @abstract\n * @param {Object} data - An object mapping uids to all key value pairs.\n */AirConsole.prototype.onPersistentDataLoaded=function(data){};/**\n * Stores a key-value pair persistently on the AirConsole servers.\n * Storage is per game. Total storage can not exceed 1 MB per game and uid.\n * Storage is public, not secure and anyone can request and tamper with it.\n * Do not store sensitive data.\n * @param {String} key - The key of the data entry.\n * @param {mixed} value - The value of the data entry.\n * @param {String|undefiend} uid - The uid for which the data should be stored.\n *                                 Default is the uid of this device.\n */AirConsole.prototype.storePersistentData=function(key,value,uid){if(!uid){uid=this.getUID();}this.set_("persistentstore",{"key":key,"value":value,"uid":uid});};/**\n * Gets called when persistent data was stored from storePersistentData().\n * @abstract\n * @param {String} uid - The uid for which the data was stored.\n */AirConsole.prototype.onPersistentDataStored=function(uid){};/** ------------------------------------------------------------------------ *\n * @chapter                      HIGH SCORES                                 *\n * @see       http://developers.airconsole.com/#!/guides/highscore           *\n * ------------------------------------------------------------------------- */ /**\n * Stores a high score of the current user on the AirConsole servers.\n * High Scores are public, not secure and anyone can request and tamper with\n * them. Do not store sensitive data. Only updates the high score if it was a\n * higher or same score. Calls onHighScoreStored when the request is done.\n * We highly recommend to read the High Score guide (developers.airconsole.com)\n * @param {String} level_name - The name of the level the user was playing.\n *                              This should be a human readable string because\n *                              it appears in the high score sharing image.\n *                              You can also just pass an empty string.\n * @param {String} level_version - The version of the level the user was\n *                                 playing. This is for your internal use.\n * @param {number} score - The score the user has achieved\n * @param {String|Array<String>|undefined} uid - The UIDs of the users that\n *                                               achieved the high score.\n *                                               Can be a single uid or an\n *                                               array of uids. Default is the\n *                                               uid of this device.\n * @param {mixed|undefined} data - Custom high score data (e.g. can be used to\n *                                 implement Ghost modes or include data to\n *                                 verify that it is not a fake high score).\n * @param {String|undefined} score_string - A short human readable\n *                                          representation of the score.\n *                                          (e.g. "4 points in 3s").\n *                                          Defaults to "X points" where x is\n *                                          the score converted to an integer.\n */AirConsole.prototype.storeHighScore=function(level_name,level_version,score,uid,data,score_string){if(score==NaN||typeof score!="number"){throw"Score needs to be a number and not NaN!";}if(!uid){uid=this.getUID();}if(uid.constructor==Array){uid=uid.join("|");}this.set_("highscore",{"uid":uid,"level_name":level_name,"level_version":level_version,"score":score,"data":data,"score_string":score_string});};/**\n * Gets called when a high score was successfully stored.\n * We highly recommend to read the High Score guide (developers.airconsole.com)\n * @param {AirConsole~HighScore|null} high_score - The stored high score if\n *                                                 it is a new best for the\n *                                                 user or else null.\n *                                                 Ranks include "world",\n *                                                 "country", "region", "city"\n *                                                 if a high score is passed.\n */AirConsole.prototype.onHighScoreStored=function(high_score){};/**\n * Requests high score data of players (including global high scores and\n * friends). Will call onHighScores when data was received.\n * We highly recommend to read the High Score guide (developers.airconsole.com)\n * @param {String} level_name - The name of the level\n * @param {String} level_version - The version of the level\n * @param {Array<String>|undefined} uids - An array of UIDs of the users that\n *                                         should be included in the result.\n *                                         Default is all connected controllers\n * @param {Array<String>|undefined} ranks - An array of high score rank types.\n *                                          High score rank types can include\n *                                          data from across the world, only a\n *                                          specific area or a users friends.\n *                                          Valid array entries are "world",\n *                                          "country",  "region", "city",\n *                                          "friends".\n *                                          Default is ["world"].\n * @param {number|undefined} total - Amount of high scores to return per rank\n *                                   type. Default is 8.\n * @param {number|undefined} top - Amount of top high scores to return per rank\n *                                 type. top is part of total. Default is 5.\n */AirConsole.prototype.requestHighScores=function(level_name,level_version,uids,ranks,total,top){if(!ranks){ranks=["world"];}if(!uids){uids=[];var device_ids=this.getControllerDeviceIds();for(var i=0;i<device_ids.length;++i){uids.push(this.getUID(device_ids[i]));}}if(total==undefined){total=8;}if(top==undefined){top=5;}this.set_("highscores",{"level_name":level_name,"level_version":level_version,"uids":uids,"ranks":ranks,"total":total,"top":top});};/**\n * Gets called when high scores are returned after calling requestHighScores.\n * We highly recommend to read the High Score guide (developers.airconsole.com)\n * @param {Array<AirConsole~HighScore>} high_scores - The high scores.\n */AirConsole.prototype.onHighScores=function(high_scores){};/**\n * DeviceState contains information about a device in this session.\n * Use the helper methods getUID, getNickname, getProfilePicture and\n * getCustomDeviceState to access this data.\n * @typedef {object} AirConsole~DeviceState\n * @property {string} uid - The globally unique ID of the user.\n * @property {string|undefined} custom - Custom device data that this API can\n *                                       set.\n * @property {string|undefined} nickname - The nickname of the user.\n * @property {boolean|undefined} slow_connection - If the user has a high\n *                                                 server latency.\n */ /**\n * HighScore contains information about a users high score\n * We highly recommend to read the High Score guide (developers.airconsole.com)\n * @typedef {object} AirConsole~HighScore\n * @property {String} level_name - The name of the level the user was playing\n * @property {String} level_version - The version of the level the user was\n *                                    playing\n * @property {number} score - The score the user has achieved\n * @property {String} score_string - A human readable version of score.\n * @property {Object} ranks - A dictionary of rank type to actual rank.\n * @property {mixed} data - Custom High Score data. Can be used to implement\n *                          Ghost modes or to verify that it is not a fake\n *                          high score.\n * @property {String} uids - The unique ID of the users that achieved the\n *                           high score.\n * @property {number} timestamp - The timestamp of the high score\n * @property {String} nicknames - The nicknames of the users\n * @property {String} relationship - How the user relates to the current user\n *                                 - "requested" (a user which was requested)\n *                                 - "airconsole" (played AirConsole together)\n *                                 - "facebook" (a facebook friend)\n *                                 - "other" (about same skill level)\n * @property {String} location_country_code - The iso3166 country code\n * @property {String} location_country_name - The name of the country\n * @property {String} location_region_code - The iso3166 region code\n * @property {String} location_region_name - The name of the region\n * @property {String} location_city_name - The name of the city\n * @property {String} share_url - The URL that should be used to share this\n *                                high score.\n * @property {String} share_image - The URL to an image that displays this\n *                                  high score.\n */ /** ------------------------------------------------------------------------ *\n *                   ONLY PRIVATE FUNCTIONS BELLOW                           *\n * ------------------------------------------------------------------------- */ /**\n * Initializes the AirConsole.\n * @param {AirConsole~Config} opts - The Config.\n * @private\n */AirConsole.prototype.init_=function(opts){opts=opts||{};var me=this;me.version="1.7.0";me.devices=[];me.server_time_offset=opts.synchronize_time?0:false;window.addEventListener("message",function(event){me.onPostMessage_(event);},false);me.set_("orientation",opts.orientation);if(opts.setup_document!==false){me.setupDocument_();}AirConsole.postMessage_({action:"ready",version:me.version,device_motion:opts.device_motion,synchronize_time:opts.synchronize_time,location:me.getLocationUrl_()});};/**\n * Handling onMessage events\n * @private\n * @param {Event} event - Event object\n */AirConsole.prototype.onPostMessage_=function(event){var me=this;var data=event.data;var game_url=me.getGameUrl_(me.getLocationUrl_());if(data.action=="device_motion"){me.onDeviceMotion(data.data);}else if(data.action=="message"){if(me.device_id!==undefined){if(me.devices[data.from]&&game_url==me.getGameUrl_(me.devices[data.from].location)){me.onMessage(data.from,data.data);}}}else if(data.action=="update"){if(me.device_id!==undefined){var game_url_before=null;var game_url_after=null;var before=me.devices[data.device_id];if(before){game_url_before=me.getGameUrl_(before.location);}if(data.device_data){game_url_after=me.getGameUrl_(data.device_data.location);}me.devices[data.device_id]=data.device_data;me.onDeviceStateChange(data.device_id,data.device_data);var is_connect=game_url_before!=game_url&&game_url_after==game_url;if(is_connect){me.onConnect(data.device_id);}else if(game_url_before==game_url&&game_url_after!=game_url){me.onDisconnect(data.device_id);}if(data.device_data){if(data.device_data._is_custom_update&&game_url_after==game_url||is_connect&&data.device_data.custom){me.onCustomDeviceStateChange(data.device_id,data.device_data.custom);}if(data.device_data._is_players_update&&game_url_after==game_url||data.device_id==AirConsole.SCREEN&&data.device_data.players&&is_connect){me.device_id_to_player_cache=null;me.onActivePlayersChange(me.convertDeviceIdToPlayerNumber(me.getDeviceId()));}if(data.device_data.premium&&(data.device_data._is_premium_update||is_connect)){me.onPremium(data.device_id);}if(data.device_data._is_profile_update){me.onDeviceProfileChange(data.device_id);}}}}else if(data.action=="ready"){me.device_id=data.device_id;me.devices=data.devices;if(me.server_time_offset!==false){me.server_time_offset=data.server_time_offset||0;}var client=me.devices[data.device_id].client;me.bindTouchFix_(client);me.onReady(data.code);var game_url=me.getGameUrl_(me.getLocationUrl_());for(var i=0;i<me.devices.length;++i){if(me.devices[i]&&me.getGameUrl_(me.devices[i].location)==game_url){if(i!=me.getDeviceId()){me.onConnect(i);var custom_state=me.getCustomDeviceState(i);if(custom_state!==undefined){me.onCustomDeviceStateChange(i,custom_state);}if(i==AirConsole.SCREEN&&me.devices[i].players){me.device_id_to_player_cache=null;me.onActivePlayersChange(me.convertDeviceIdToPlayerNumber(me.getDeviceId()));}}if(me.isPremium(i)){me.onPremium(i);}}}}else if(data.action=="profile"){if(me.device_id){var state=me.devices[me.device_id];state["auth"]=data.auth;state["nickname"]=data.nickname;state["picture"]=data.picture;me.onDeviceStateChange(me.device_id,state);me.onDeviceProfileChange(me.device_id);}}else if(data.action=="email"){me.onEmailAddress(data.email);}else if(data.action=="ad"){if(data.complete==undefined){me.onAdShow();}else{me.onAdComplete(data.complete);}}else if(data.action=="highscores"){me.onHighScores(data.highscores);}else if(data.action=="highscore"){me.onHighScoreStored(data.highscore);}else if(data.action=="persistentstore"){me.onPersistentDataStored(data.uid);}else if(data.action=="persistentrequest"){me.onPersistentDataLoaded(data.data);}else if(data.action=="premium"){me.devices[data.device_id].premium=true;me.onPremium(data.device_id);}else if(data.action=="debug"){if(data.debug=="fps"){if(window.requestAnimationFrame){var second_animation_frame=function second_animation_frame(start){window.requestAnimationFrame(function(end){if(start!=end){var delta=end-start;AirConsole.postMessage_({"action":"debug","fps":1000/delta});}else{second_animation_frame(start);}});};window.requestAnimationFrame(second_animation_frame);}}}};/**\n * @private\n * @param {String} url - A url.\n * @return {String} Returns the root game url over http.\n */AirConsole.prototype.getGameUrl_=function(url){if(!url){return;}url=url.split("#")[0];url=url.split("?")[0];if(url.indexOf("screen.html",url.length-11)!==-1){url=url.substr(0,url.length-11);}if(url.indexOf("controller.html",url.length-15)!==-1){url=url.substr(0,url.length-15);}if(url.indexOf("https://")==0){url="http://"+url.substr(8);}return url;};/**\n * Posts a message to the parent window.\n * @private\n * @param {Object} data - the data to be sent to the parent window.\n */AirConsole.postMessage_=function(data){try{window.parent.postMessage(data,document.referrer);}catch(e){console.log("Posting message to parent failed: "+JSON.stringify(data));}};/**\n * Sets a variable in the external AirConsole framework.\n * @private\n * @param {string} key - The key to set.\n * @param {serializable} value - The value to set.\n */AirConsole.prototype.set_=function(key,value){AirConsole.postMessage_({action:"set",key:key,value:value});};/**\n * Adds default css rules to documents so nothing is selectable, zoom is\n * fixed to 1 and preventing scrolling down (iOS 8 clients drop out of\n * fullscreen when scrolling).\n * @private\n */AirConsole.prototype.setupDocument_=function(){var style=document.createElement("style");style.type="text/css";var css_code="html {\\n"+"  -ms-touch-action: pan-x;\\n"+"}\\n"+"body {\\n"+"  -webkit-touch-callout: none;\\n"+"  -webkit-text-size-adjust: none;\\n"+"  -ms-text-size-adjust: none;\\n"+"  -webkit-user-select: none;\\n"+"  -moz-user-select: none;\\n"+"  -ms-user-select: none;\\n"+"  user-select: none;\\n"+"  -webkit-highlight: none;\\n"+"  -webkit-tap-highlight-color: rgba(0,0,0,0);\\n"+"  -webkit-tap-highlight-color: transparent;\\n"+"  -ms-touch-action: pan-y;\\n"+"  -ms-content-zooming: none;\\n"+"}\\n"+"\\n"+"input, textarea  {\\n"+"  -webkit-user-select: text;\\n"+"  -moz-user-select: text;\\n"+"  -ms-user-select: text;\\n"+"  user-select: text;\\n"+"}\\n"+"-ms-@viewport {\\n"+"    width: device-width;\\n"+"    initial-scale: 1;\\n"+"    zoom: 1;\\n"+"    min-zoom: 1;\\n"+"    max-zoom: 1;\\n"+"    user-zoom: fixed;\\n"+"}";if(style.styleSheet){style.styleSheet.cssText=css_code;}else{style.appendChild(document.createTextNode(css_code));}var meta=document.createElement("meta");meta.setAttribute("name","viewport");meta.setAttribute("content","width=device-width, minimum-scale=1, "+"initial-scale=1, user-scalable=no");var head=document.getElementsByTagName("head")[0];head.appendChild(meta);head.appendChild(style);document.addEventListener(\'touchmove\',function(e){e.preventDefault();},{passive:false});if(navigator.userAgent.indexOf("Windows Phone ")!=-1&&navigator.userAgent.indexOf("Edge/")!=-1){document.oncontextmenu=document.body.oncontextmenu=function(){return false;};}};/**\n * Returns the current location url\n * @return {string}\n * @private\n */AirConsole.prototype.getLocationUrl_=function(){return document.location.href;};/**\n * Fixes delay in touchstart in crosswalk by calling preventDefault.\n * @param {Object} client - The client object\n * @private\n */AirConsole.prototype.bindTouchFix_=function(client){// This fix is only necessary for Android Crosswalk\nif(navigator.userAgent.match(/Android/)&&client&&client.app==="intel-xdk"&&client.version<=2.3){document.addEventListener(\'touchstart\',function(e){var els=[\'DIV\',\'IMG\',\'SPAN\',\'BODY\',\'TD\',\'TH\',\'CANVAS\',\'P\',\'B\',\'CENTER\',\'EM\',\'FONT\',\'H1\',\'H2\',\'H3\',\'H4\',\'H5\',\'H6\',\'HR\',\'I\',\'LI\',\'PRE\',\'SMALL\',\'STRONG\',\'U\'];if(els.indexOf(e.target.nodeName)!=-1){// Check if one of the parent elements is a link\nvar parent=e.target.parentNode;while(parent&&parent.nodeName!="BODY"){if(parent.nodeName=="A"){return;}parent=parent.parentNode;}e.preventDefault();setTimeout(function(){e.target.click();},200);}});}};window.addEventListener(\'error\',function(e){var stack=undefined;if(e.error&&e.error.stack){stack=e.error.stack;}AirConsole.postMessage_({"action":"jserror","url":document.location.href,"exception":{"message":e.message,"error":{"stack":stack},"filename":e.filename,"lineno":e.lineno,"colno":e.colno}});});;// Dynamic CDN javascript:\n/*\n Copyright by N-Dream AG, 2018\n @licence GNU General Public License v3.0\n*/(function(){if(window.Proxy){var r=function r(a,b,c,e,f){a._xmlHttpRequestRetryRanger.pending=!0;a==b&&b.addEventListener("loadstart",function(b){g(a._xmlHttpRequestRetryRanger.listeners.loadstart,b);});b.addEventListener("readystatechange",function(d){if(l(a,b)&&4==b.readyState){a._xmlHttpRequestRetryRanger.pending=!1;if(a._xmlHttpRequestRetryRanger.config.USE_PSEUDO_RANGE_HEADERS?b.getResponseHeader("x-retry-ranger-content-range"):b.getResponseHeader("content-range")){if("arraybuffer"==b.responseType)a._xmlHttpRequestRetryRanger.response.set(new Uint8Array(b.response),c);else{if(""==b.responseType||"text"==b.responseType||"json"==b.responseType)a._xmlHttpRequestRetryRanger.response+=b.response;}}else throw"Response didn\'t include Content-Range header";p(a,d,!1);if(e<a._xmlHttpRequestRetryRanger.total-1){d=new k();d.responseType=b.responseType;var f=Math.min(e+a._xmlHttpRequestRetryRanger.config.CHUNK_SIZE,a._xmlHttpRequestRetryRanger.total-1);q(a,d,e+1,f);r(a,d,e+1,f);f==a._xmlHttpRequestRetryRanger.total-1&&v(a,d);d.send();}}});a._xmlHttpRequestRetryRanger.lastLoaded=0;b.addEventListener("progress",function(c){if(0!=b.status){var e=c.loaded-a._xmlHttpRequestRetryRanger.lastLoaded;a._xmlHttpRequestRetryRanger.lastLoaded+=e;a._xmlHttpRequestRetryRanger.loaded+=e;c=h("progress",c,a);a._xmlHttpRequestRetryRanger.progressComplete=c.loaded==c.total;g(a._xmlHttpRequestRetryRanger.listeners.progress,c);}});b.addEventListener("error",function(d){a._xmlHttpRequestRetryRanger.loaded-=a._xmlHttpRequestRetryRanger.lastLoaded;a._xmlHttpRequestRetryRanger.lastLoaded=0;var u=a._xmlHttpRequestRetryRanger.retries;u<a._xmlHttpRequestRetryRanger.config.RETRY?window.setTimeout(function(){var d=new k();f&&w(a,d,c,e);d.responseType=b.responseType;a._xmlHttpRequestRetryRanger.retries+=u+1;q(a,d,c,e);r(a,d,c,e,f);0!=c&&e==a._xmlHttpRequestRetryRanger.total-1&&v(a,d);d.send();},a._xmlHttpRequestRetryRanger.config.RETRY_BACKOFF):(a._xmlHttpRequestRetryRanger.readyState=4,a._xmlHttpRequestRetryRanger.status=0,g(a._xmlHttpRequestRetryRanger.listeners.readystatechange,z("readystatechange",d,a)),g(a._xmlHttpRequestRetryRanger.listeners.progress,h("progress",d,a)),g(a._xmlHttpRequestRetryRanger.listeners.error,h("error",d,a)),g(a._xmlHttpRequestRetryRanger.listeners.loadend,h("loadend",d,a)));});x(a,"timeout");},v=function v(a,b){b.addEventListener("readystatechange",function(c){4==b.readyState&&0!=b.status&&p(a,c,!0);});},w=function w(a,b,c,e){a._xmlHttpRequestRetryRanger.retries=0;b.addEventListener("readystatechange",function(c){if(2==b.readyState)if(a._xmlHttpRequestRetryRanger.status=b.status,a._xmlHttpRequestRetryRanger.statusText=b.statusText,l(a,b)){var d;if(d=a._xmlHttpRequestRetryRanger.config.USE_PSEUDO_RANGE_HEADERS?b.getResponseHeader("x-retry-ranger-content-range"):b.getResponseHeader("content-range")){d=d.split("/")[1];if("*"==d)throw"Response didn\'t include total Content-Range size";d=parseInt(d);}else throw"Response didn\'t include Content-Range header";a._xmlHttpRequestRetryRanger.total=d;a._xmlHttpRequestRetryRanger.firstRequest=b;if("arraybuffer"==b.responseType)a._xmlHttpRequestRetryRanger.response=new Uint8Array(d);else if(""==b.responseType||"text"==b.responseType||"json"==b.responseType)a._xmlHttpRequestRetryRanger.response="";else throw"responseType "+b.responseType+" not supported";}else a._xmlHttpRequestRetryRanger.total=0,a._xmlHttpRequestRetryRanger.response="",a._xmlHttpRequestRetryRanger.firstRequest=b;4==b.readyState?0!=b.status&&(e>=a._xmlHttpRequestRetryRanger.total-1||!l(a,b))&&(l(a,b)||(a._xmlHttpRequestRetryRanger.pending=!1),p(a,c,!0)):a._xmlHttpRequestRetryRanger.readyState<b.readyState&&(a._xmlHttpRequestRetryRanger.readyState=b.readyState,g(a._xmlHttpRequestRetryRanger.listeners.readystatechange,m(c,a)));});},q=function q(a,b,c,e){for(var f=[],d=0;d<a._xmlHttpRequestRetryRanger.open_arguments.length;++d){1!=d?f.push(a._xmlHttpRequestRetryRanger.open_arguments[d]):f.push(a._xmlHttpRequestRetryRanger.config.URL_REWRITE(a._xmlHttpRequestRetryRanger.open_arguments[d],c,e,a._xmlHttpRequestRetryRanger.retries));}f=b.open.apply(b,f);d="range";a._xmlHttpRequestRetryRanger.config.USE_PSEUDO_RANGE_HEADERS&&(d="x-retry-ranger-range");b.setRequestHeader(d,"bytes="+c+"-"+e);return f;},p=function p(a,b,c){c&&(a._xmlHttpRequestRetryRanger.readyState=4);4!=a._xmlHttpRequestRetryRanger.readyState||a._xmlHttpRequestRetryRanger.pending||(a._xmlHttpRequestRetryRanger.progressComplete||g(a._xmlHttpRequestRetryRanger.listeners.progress,h("progress",b,a,!0)),g(a._xmlHttpRequestRetryRanger.listeners.readystatechange,m(b,a)),g(a._xmlHttpRequestRetryRanger.listeners.load,h("load",b,a,!0)),g(a._xmlHttpRequestRetryRanger.listeners.loadend,h("loadend",b,a,!0)));},x=function x(a,b){a.addEventListener(b,A(a,b));},A=function A(a,b){return function(c){g(a._xmlHttpRequestRetryRanger.listeners[b],c);};},g=function g(a,b){if(a.on)a.on(b);for(var c=0;c<a.listeners.length;++c){a.listeners[c](b);}},h=function h(a,b,c,e){return new Proxy(m(b,c),{get:function get(b,d){return"lengthComputable"==d?0<c._xmlHttpRequestRetryRanger.total:"total"==d?c._xmlHttpRequestRetryRanger.total:"loaded"==d?e?c._xmlHttpRequestRetryRanger.total:c._xmlHttpRequestRetryRanger.loaded:"type"==d?a:b[d];},set:function set(a,b,c){a[b]=c;return!0;}});},z=function z(a,b,c){return new Proxy(m(b,c),{get:function get(b,c){return"type"==c?a:b[c];},set:function set(a,b,c){a[b]=c;return!0;}});},m=function m(a,b){return new Proxy(a,{get:function get(a,e){return"target"==e||"currentTarget"==e?b._xmlHttpRequestRetryRanger.proxy:"function"==typeof a[e]?function(){return a[e].apply(a,arguments);}:a[e];},set:function set(a,b,f){a[b]=f;return!0;}});},l=function l(a,b){return 206==b.status||a._xmlHttpRequestRetryRanger.config.USE_PSEUDO_RANGE_HEADERS&&200==b.status;},t={CHUNK_SIZE:5242880,MATCH:function MATCH(a){return!0;},ACTIVE:function ACTIVE(){var a=["Chrome","Safari","Firefox","Edge"];if(navigator.userAgent)for(var b=0;b<a.length;++b){if(-1!=navigator.userAgent.indexOf(a[b]+"/"))return!0;}return!1;},RETRY:3,RETRY_BACKOFF:1E3,URL_REWRITE:function URL_REWRITE(a,b,c,e){return a;},USE_PSEUDO_RANGE_HEADERS:!1},n={loadstart:!0,progress:!0,load:!0,loadend:!0,error:!1,timeout:!1,readystatechange:!1},k=XMLHttpRequest,B={set:function set(a,b,c){0==b.indexOf("on")&&void 0!==a._xmlHttpRequestRetryRanger.listeners[b.substr(2)]?(a=a._xmlHttpRequestRetryRanger.listeners[b.substr(2)],a.on&&delete a.on,c&&(a.on=c)):("responseType"==b&&(a._xmlHttpRequestRetryRanger.responseType=c,"json"==c&&(c="")),a[b]=c);return!0;},get:function get(a,b){var c=!!a._xmlHttpRequestRetryRanger.open_arguments;if("open"==b)return function(){var c=arguments[1];if("GET"==arguments[0].toUpperCase()&&!1!==arguments[2]&&a._xmlHttpRequestRetryRanger.config.MATCH(c)){a._xmlHttpRequestRetryRanger.open_arguments=arguments;c=a._xmlHttpRequestRetryRanger.config.CHUNK_SIZE-1;w(a,a,0,c);var f=q(a,a,0,c);r(a,a,0,c,!0);return f;}a.responseType=a._xmlHttpRequestRetryRanger.responseType||"";for(f in n){x(a,f);}return a[b].apply(a,arguments);};if("addEventListener"==b)return function(){if(void 0!==n[arguments[0]])a._xmlHttpRequestRetryRanger.listeners[arguments[0]].listeners.push(arguments[1]);else return a[b].apply(a,arguments);};if("removeEventListener"==b)return function(){if(void 0!==n[arguments[0]])for(var c=a._xmlHttpRequestRetryRanger.listeners[arguments[0]].listeners,f=0;f<c.length;++f){c[f]==arguments[1]&&c.splice(f);}else return a[b].apply(a,arguments);};if("responseText"==b&&c){if("text"!=a._xmlHttpRequestRetryRanger.responseType&&a._xmlHttpRequestRetryRanger.responseType)throw"responseText not available with response type "+a._xmlHttpRequestRetryRanger.responseType;return 4==a._xmlHttpRequestRetryRanger.readyState?a._xmlHttpRequestRetryRanger.response||"":"";}if("response"==b&&c){if(4==a._xmlHttpRequestRetryRanger.readyState)if("text"!=a._xmlHttpRequestRetryRanger.responseType&&a._xmlHttpRequestRetryRanger.responseType){if("json"==a._xmlHttpRequestRetryRanger.responseType)return JSON.parse(a._xmlHttpRequestRetryRanger.response);if("arraybuffer"==a._xmlHttpRequestRetryRanger.responseType)return a._xmlHttpRequestRetryRanger.response.buffer;}else return a._xmlHttpRequestRetryRanger.response||"";return"json"==a._xmlHttpRequestRetryRanger.responseType?null:"";}if("responseType"==b&&c)return a._xmlHttpRequestRetryRanger.responseType||"";if("readyState"==b&&c)return a._xmlHttpRequestRetryRanger.readyState||0;if("status"==b&&c)return 206==a._xmlHttpRequestRetryRanger.status?200:a._xmlHttpRequestRetryRanger.status||0;if("statusText"==b&&c)return"Partial Content"==a._xmlHttpRequestRetryRanger.statusText?"OK":a._xmlHttpRequestRetryRanger.statusText||"";if("responseURL"==b&&c)return(c=a._xmlHttpRequestRetryRanger.firstRequest)?c[b]:"";if("abort"==b||"overrideMimeType"==b)console.error(b+" is not implemented in xmlhttprequest-retry-ranger");else return"getResponseHeader"==b&&c?function(){var c=a._xmlHttpRequestRetryRanger.firstRequest;return c?arguments[0]&&"content-range"==arguments[0].toLowerCase()?null:arguments[0]&&"content-length"==arguments[0].toLowerCase()?void 0!==a._xmlHttpRequestRetryRanger.total?a._xmlHttpRequestRetryRanger.total:null:c[b].apply(c,arguments):null;}:"getAllResponseHeaders"==b&&c?function(){var b="",c=a._xmlHttpRequestRetryRanger.firstRequest;if(c){c=c.getAllResponseHeaders().split("\\r\\n");for(var d=0;d<c.length;++d){var g=c[d].split(":");if(2<=g.length){g=g[0];var h=a._xmlHttpRequestRetryRanger.proxy.getResponseHeader(g);null!=h&&(b+=g+": "+h+"\\r\\n");}}}return b;}:"function"==typeof a[b]?function(){return a[b].apply(a,arguments);}:a[b];}};window.XMLHttpRequest=function(a){a=new k(a);var b=window.xmlHttpRequestRetryRanger||t;if(window.xmlHttpRequestRetryRanger)for(var c in t){var e=window.xmlHttpRequestRetryRanger[c];b[c]=void 0!==e?e:t[c];}if(!b.ACTIVE())return a;c=new Proxy(a,B);b={listeners:{},config:b,readyState:0,proxy:c,lastLoaded:0,loaded:0,total:0};for(var f in n){b.listeners[f]={listeners:[]};}a._xmlHttpRequestRetryRanger=b;return c;};for(var y in k){window.XMLHttpRequest[y]=k[y];}}})();;window.xmlHttpRequestRetryRanger={CHUNK_SIZE:8388608,MATCH:function MATCH(a){return 0==a.indexOf("Build/")&&a.endsWith(".unityweb")||-1!=a.indexOf("StreamingAssets/")&&a.endsWith(".unity3d")||0==a.indexOf("Release/")&&(a.endsWith(".js")||a.endsWith(".jsgz")||a.endsWith(".mem")||a.endsWith(".memgz")||a.endsWith(".data")||a.endsWith(".datagz"));},ACTIVE:function ACTIVE(){if((window.onGameReady||window.UnityLoader)&&"game.airconsole.com"==document.location.hostname&&document.location.pathname.endsWith("screen.html")&&window.app&&!window.app.is_unity_ready){var a=["Chrome","Safari","Firefox","Edge"];if(navigator.userAgent)for(var b=0;b<a.length;++b){if(-1!=navigator.userAgent.indexOf(a[b]+"/"))return!0;}}return!1;},USE_PSEUDO_RANGE_HEADERS:!0,URL_REWRITE:function URL_REWRITE(a,b,e,c){c=a.split("#");var d=c[0];a=void 0;void 0!=c[1]&&(c.shift(),a=c.join("#"));d=-1==d.indexOf("?")?d+"?":d+"&";b=d+("xmlhttprequest-ranger-start="+b+"&xmlhttprequest-ranger-end="+e);void 0!=a&&(b+="#"+a);return b;}};;'},function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),i=n(7),s=n.n(i),o=(n(13),n(1)),d=n(2),c=n(4),l=n(3),u=n(5),p=(n(14),n(15),n(16),function(e){function t(){return Object(o.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"fixed-field"},r.a.createElement("div",{className:"playing-field"},r.a.createElement("div",{id:"tower1"},r.a.createElement("img",{class:"tower-img",src:n(17)})),r.a.createElement("div",{id:"tower1"},r.a.createElement("img",{class:"tower-img",src:n(18)})),r.a.createElement("div",{id:"tower1"},r.a.createElement("img",{class:"tower-img",src:n(19)})),r.a.createElement("div",{id:"tower1"},r.a.createElement("img",{class:"tower-img",src:n(20)}))))}}]),t}(a.Component));n(21);var m=function(e){function t(e){return Object(o.a)(this,t),Object(c.a)(this,Object(l.a)(t).call(this,e))}return Object(u.a)(t,e),Object(d.a)(t,[{key:"componentDidMount",value:function(){!function(){var e=new window.AirConsole;e.onConnect=function(e){},e.onDisconnect=function(t){void 0!=e.convertDeviceIdToPlayerNumber(t)&&e.setActivePlayers(0)},e.onMessage=function(t,n){console.log(t,n),void 0!=e.convertDeviceIdToPlayerNumber(t)&&n.move}}()}},{key:"render",value:function(){var e=this;return r.a.createElement("div",{className:"App",ref:function(t){return e.div=t}},r.a.createElement("div",{className:"background"}),r.a.createElement(p,{className:"playing-field"}))}}]),t}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(m,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}],[[8,1,2]]]);
//# sourceMappingURL=main.f5a3ae89.chunk.js.map